<!DOCTYPE html>
<html lang="en">
  <quoia-head>
  <body>
    <div class="container-fluid page-container">
      <div class="row">
        <quoia-sidebar>
        <div class="col right-col-parent">
          <div class="right-col">
            <h2 class="display-4 text-center mb-4">Getting Started</h2>
            <p>
              To get started, set up a directory for your project and install Quoia with npm:
            </p>
            <pre lang="sh"><code class="language-bash">$ npm install quoia</code></pre>
            <p>
              Next, you'll need to set up a build file where you define various build parameters.
              In the root directory of your project, create new file <code>quoia.build.js</code>
              and set up the build process:
            </p>
            <pre lang="javascript"><code class="language-javascript">{{buildScriptSample}}</code></pre>
            <p>
              This is the file we'll run with node to build our project (<code>node ./quoia.build.js</code>).
            </p>
            <p>
              In our file, we import the <code>build</code> function from Quoia, define a
              <code>config</code> object, then call <code>build(config)</code>. The <code>config</code> object is 
              what defines the main parameters of our project. In this example, two parameters are set:
            </p>
            <ul>
              <li><code>outDir</code> - The output directory where Quoia will build to.</li>
              <li><code>rootPage</code> - The component that serves as the root page of our site.</li>
            </ul>
            <p>
              By now I'm sure you've noticed that the <code>rootPage</code> parameter has been set to a
              <code>require</code> statement. With Quoia, we want to have each component in our project to
              be a separate node-requirable file.
            </p>
            <p>
              A component defines either a full page of HTML to act as one page on our site, or just
              a section of HTML that we can use inside of other components. Each component has its
              own scripts, styles, and template. In the example above, we are trying to reference
              a component found at <code>./src/home.quoia</code>, so let's make one there now.
            </p>
            <p>
              Create a <code>src</code> folder in the root directory of your project, and inside
              there create a <code>home.quoia.js</code> file:
            </p>
            <pre lang="javascript"><code class="language-javascript">{{homeComponentSample}}</code></pre>
            <p>
              Here we are importing the Component class from Quoia, and using it define our home
              component. In this example, our component has the following properties defined:
            </p>
            <ul>
              <li><code>template</code> - Relative path to our template file.</li>
              <li><code>name</code> - Internal name of our component.</li>
            </ul>
            <p>
              The <code>template</code> property is pretty self explanatory - that's just the HTML
              file this component will use. The <code>name</code> property represents the internal
              name of our component. Quoia uses this to identify the component internally, so it
              must be present on every component. When working with subpages, it also denotes how the
              component's URL will look.
            </p>
            <div class="alert alert-secondary" role="alert">
              To learn more about how <code>name</code> works with subpage URL's, check out the <a href="/components">Components</a> page.
            </div>
            <p>
              Let's add a <code>./src/home.html</code> template file for our home page:
            </p>
            <pre lang="html"><code class="language-html">{{homeTemplateSample}}</code></pre>
            <p>
              We now have a complete component! Let's build our project to make sure everything
              is set up right. Run the build script with node:
            </p>
            <pre lang="sh"><code class="language-bash">$ node ./quoia.build.js</code></pre>
            <p>
              After the build is complete, your project should now have a <code>./dist</code> folder,
              and inside it you'll find <code>index.html</code> wihich has the contents of the template
              we made earlier.
            </p>
            <p>
              Notice that the home component template was named as <code>index.html</code> in the root
              of our project. This was because we defined this component as the <code>rootPage</code>
              in our build config.
            </p>
            <h2>Subpages</h2>
            <p>
              Let's add a subpage to our website. Let's add a new folder <code>./src/pages</code>
              to contain all subpages for our site. In there, let's add a new folder
              <code>./src/pages/about</code> and populate it with a template and component file:
            </p>
            <p class="prism-topper"><code>./src/pages/about/about.quoia.js</code></p>
            <pre lang="javascript"><code class="language-javascript">{{aboutComponentSample}}</code></pre>
            <p class="prism-topper"><code>./src/pages/about/about.html</code></p>
            <pre lang="html"><code class="language-html">{{aboutTemplateSample}}</code></pre>
            <p>
              In order for Quoia to recognize this component, we need to add it as a child of
              our home component:
            </p>
            <p class="prism-topper"><code>./src/home.quoia.js</code></p>
            <pre lang="javascript"><code class="language-javascript">{{homeComponentSample2}}</code></pre>
            <p>
              If we build our project again, you'll see that our <code>./dist</code> directory now has
              a folder <code>about</code> which contains and <code>index.html</code> with the about
              component template. Note that the folder name of the about component is the name we defined
              in the component.
            </p>
            <p>
              Our website has a few pages now which is great, but let's optimize things a little. Both
              pages have the same exact <code>&lt;head&gt;</code> tag, so let's turn that into it's own
              component.
            </p>
            <h2>Component Importing</h2>
            <p>
              Let's make a new folder to hold our components <code>./src/components</code>. In there,
              let's make a folder <code>head-tag</code> and add our component files:
            </p>
            <p class="prism-topper"><code>./src/components/head-tag/head-tag.quoia.js</code></p>
            <pre lang="javascript"><code class="language-javascript">{{headComponentSample}}</code></pre>
            <p class="prism-topper"><code>./src/components/head-tag/head-tag.html</code></p>
            <pre lang="html"><code class="language-html">{{headTemplateSample}}</code></pre>
            <p>
              In our template, we have the common <code>&lt;head&gt;</code> HTML code from each page.
              In our component file, we specify the template path and name as usual, but we also add
              the <code>selector</code> attribute. This is how we'll reference the component in our
              page templates, in this case by using <code>&lt;quoia-head&gt;</code>. Let's revise our
              page templates:
            </p>
            <p class="prism-topper"><code>./src/home.html</code></p>
            <pre lang="html"><code class="language-html">{{homeTemplateRevised}}</code></pre>
            <p class="prism-topper"><code>./src/pages/about/about.html</code></p>
            <pre lang="html"><code class="language-html">{{aboutTemplateRevised}}</code></pre>
            <div class="alert alert-secondary" role="alert">
              Quoia components do <strong>not</strong> have a closing tag!
            </div>
            <p>
              Now when we build our project, the HTML of both pages will include the proper <code>&lt;head&gt;</code>
              tag from our <code>head-tag</code> component. If we change the head tag template,
              it will change everywhere else we use it.
            </p>
            <h2>What's next?</h2>
            <p>
              You have successfully created your first Quoia project! However, this guide only
              covers the basics, so feel free to continue browsing the docs to learn what else Quoia can do.
            </p>
            <a href="/build-config">Read about build configuration ></a>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
